// <auto-generated />
using System;
using DivitOtoyol.Modules.PlateRecognitions.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DivitOtoyol.Modules.PlateRecognitions.Shared.Data.Migrations.PlateRecognitions
{
    [DbContext(typeof(PlateRecognitionDbContext))]
    [Migration("20230620065021_InitialPlateRecognitionMigration")]
    partial class InitialPlateRecognitionMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DivitOtoyol.Modules.PlateRecognitions.Records.Models.Write.Record", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("image_path");

                    b.Property<DateTime>("LprDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("lpr_date");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("metadata");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("plate");

                    b.HasKey("Id")
                        .HasName("pk_records");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_records_id");

                    b.ToTable("records", "plate_recognition");
                });

            modelBuilder.Entity("DivitOtoyol.Modules.PlateRecognitions.Records.Models.Write.Record", b =>
                {
                    b.OwnsOne("DivitOtoyol.Modules.PlateRecognitions.Records.ValueObjects.CameraInformation", "CameraInformation", b1 =>
                        {
                            b1.Property<long>("RecordId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("camera_information_id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("camera_information_name");

                            b1.HasKey("RecordId");

                            b1.ToTable("records", "plate_recognition");

                            b1.WithOwner()
                                .HasForeignKey("RecordId")
                                .HasConstraintName("fk_records_records_id");
                        });

                    b.OwnsOne("DivitOtoyol.Modules.PlateRecognitions.Records.ValueObjects.ColorInformation", "ColorInformation", b1 =>
                        {
                            b1.Property<long>("RecordId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long?>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("color_information_id");

                            b1.Property<string>("Name")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("color_information_name");

                            b1.HasKey("RecordId");

                            b1.ToTable("records", "plate_recognition");

                            b1.WithOwner()
                                .HasForeignKey("RecordId")
                                .HasConstraintName("fk_records_records_id");
                        });

                    b.OwnsOne("DivitOtoyol.Modules.PlateRecognitions.Records.ValueObjects.MakeInformation", "MakeInformation", b1 =>
                        {
                            b1.Property<long>("RecordId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long?>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("make_information_id");

                            b1.Property<string>("Name")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("make_information_name");

                            b1.HasKey("RecordId");

                            b1.ToTable("records", "plate_recognition");

                            b1.WithOwner()
                                .HasForeignKey("RecordId")
                                .HasConstraintName("fk_records_records_id");
                        });

                    b.OwnsOne("DivitOtoyol.Modules.PlateRecognitions.Records.ValueObjects.ModelInformation", "ModelInformation", b1 =>
                        {
                            b1.Property<long>("RecordId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long?>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("model_information_id");

                            b1.Property<string>("Name")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("model_information_name");

                            b1.Property<string>("TypeName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("model_information_type_name");

                            b1.HasKey("RecordId");

                            b1.ToTable("records", "plate_recognition");

                            b1.WithOwner()
                                .HasForeignKey("RecordId")
                                .HasConstraintName("fk_records_records_id");
                        });

                    b.Navigation("CameraInformation")
                        .IsRequired();

                    b.Navigation("ColorInformation");

                    b.Navigation("MakeInformation");

                    b.Navigation("ModelInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
