// <auto-generated />
using System;
using DivitOtoyol.Modules.Vehicles.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DivitOtoyol.Modules.Vehicles.Shared.Data.Migrations.Vehicles
{
    [DbContext(typeof(VehicleDbContext))]
    partial class VehicleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DivitOtoyol.Modules.Vehicles.Colors.Models.Color", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.HasKey("Id")
                        .HasName("pk_colors");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_colors_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_colors_name");

                    b.ToTable("colors", "vehicle");
                });

            modelBuilder.Entity("DivitOtoyol.Modules.Vehicles.Makes.Models.Make", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.HasKey("Id")
                        .HasName("pk_makes");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_makes_id");

                    b.ToTable("makes", "vehicle");
                });

            modelBuilder.Entity("DivitOtoyol.Modules.Vehicles.Models.Models.Model", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("MakeId")
                        .HasColumnType("bigint")
                        .HasColumnName("make_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_models_id");

                    b.HasIndex("MakeId")
                        .HasDatabaseName("ix_models_make_id");

                    b.HasIndex("TypeId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_models_type_id_name");

                    b.ToTable("models", "vehicle");
                });

            modelBuilder.Entity("DivitOtoyol.Modules.Vehicles.Types.Models.Type", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_types");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_types_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_types_parent_id");

                    b.ToTable("types", "vehicle");
                });

            modelBuilder.Entity("DivitOtoyol.Modules.Vehicles.Models.Models.Model", b =>
                {
                    b.HasOne("DivitOtoyol.Modules.Vehicles.Makes.Models.Make", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_models_makes_make_temp_id");

                    b.HasOne("DivitOtoyol.Modules.Vehicles.Types.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_models_vehicle_types_type_temp_id");

                    b.Navigation("Make");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DivitOtoyol.Modules.Vehicles.Types.Models.Type", b =>
                {
                    b.HasOne("DivitOtoyol.Modules.Vehicles.Types.Models.Type", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_types_types_parent_temp_id1");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DivitOtoyol.Modules.Vehicles.Types.Models.Type", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
